openapi: 3.1.0
info:
  title: dsp-ingest-maintenance
  version: v0.5.0-23-gcbbe7a6-dirty
servers:
- url: http://localhost:3340
  description: Local development server
- url: https://ingest.dev.dasch.swiss
  description: Production server
paths:
  /maintenance/{name}:
    post:
      tags:
      - maintenance
      operationId: postMaintenanceName
      parameters:
      - name: name
        in: path
        description: The name of the action to be performed
        required: true
        schema:
          $ref: '#/components/schemas/ActionName'
        example: UpdateAssetMetadata
      - name: restrictToProjects
        in: query
        description: Restrict the action to a list of projects, if no project is given
          apply the action to all projects.
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        '202':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unhealthy'
      security:
      - httpAuth: []
  /maintenance/create-originals/{shortcode}:
    post:
      tags:
      - maintenance
      operationId: postMaintenanceCreate-originalsShortcode
      parameters:
      - name: shortcode
        in: path
        description: The shortcode of the project must be an exactly 4 characters
          long hexadecimal string.
        required: true
        schema:
          type: string
          pattern: ^\p{XDigit}{4,4}$
        example: '0001'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MappingEntry'
        required: false
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unhealthy'
      security:
      - httpAuth: []
  /maintenance/needs-top-left-correction:
    get:
      tags:
      - maintenance
      operationId: getMaintenanceNeeds-top-left-correction
      responses:
        '202':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unhealthy'
      security:
      - httpAuth: []
  /maintenance/needs-originals:
    get:
      tags:
      - maintenance
      operationId: getMaintenanceNeeds-originals
      parameters:
      - name: imagesOnly
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '202':
          description: ''
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unhealthy'
      security:
      - httpAuth: []
components:
  schemas:
    ActionName:
      type: string
      enum:
      - ApplyTopLeftCorrection
      - UpdateAssetMetadata
    Argument:
      required:
      - argument
      - reason
      type: object
      properties:
        argument:
          type: string
        reason:
          type: string
    BadRequest:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Argument'
    DOWN:
      type: object
    InternalServerError:
      required:
      - errorMessage
      type: object
      properties:
        errorMessage:
          type: string
    MappingEntry:
      required:
      - internalFilename
      - originalFilename
      type: object
      properties:
        internalFilename:
          type: string
        originalFilename:
          type: string
    NotFound:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    Status:
      oneOf:
      - $ref: '#/components/schemas/DOWN'
      - $ref: '#/components/schemas/UP'
    UP:
      type: object
    Unauthorized:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
    Unhealthy:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
