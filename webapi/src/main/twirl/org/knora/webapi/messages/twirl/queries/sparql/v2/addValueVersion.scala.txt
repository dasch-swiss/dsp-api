@*
 * Copyright Â© 2021 - 2024 Swiss National Data and Service Center for the Humanities and/or DaSCH Service Platform contributors.
 * SPDX-License-Identifier: Apache-2.0
 *@

@import dsp.errors.SparqlGenerationException
@import dsp.valueobjects.UuidUtil
@import java.time.Instant
@import java.util.UUID
@import org.knora.webapi._
@import org.knora.webapi.messages.SmartIri
@import org.knora.webapi.messages.twirl.SparqlTemplateLinkUpdate
@import org.knora.webapi.messages.v2.responder.valuemessages._

@**
 * Inserts a new version of an existing value of a resource property.
 *
 * @param dataNamedGraph the named graph to update.
 * @param resourceIri the resource to update.
 * @param propertyIri the IRI of the property that points from the resource to the value.
 * @param currentValueIri the most recent existing version of the value.
 * @param newValueIri the new value IRI.
 * @param valueTypeIri the type of the previous value.
 * @param permissionRelevantAssertions Permission-relevant assertions, i.e. owner and project plus permissions, in
 *        the form of a list of tuples (predicate, object).
 * @param value the value to insert.
 * @param an optional comment on the new value.
 * @param linkUpdates a list of [[SparqlTemplateLinkUpdate]] objects describing links and LinkValues that need to be
 *        updated for resource references in standoff markup.
 * @param currentTime an xsd:dateTimeStamp that will be attached to the resources.
 * @param requestingUser the IRI of the user making the request.
 *
 * This operation will do nothing if `currentValueIri` is not in fact the most recent version, if `valueTypeIri` is
 * the wrong type for the property, or if the resource or the current value are nonexistent or marked as deleted. To
 * find out whether the operation succeeded, the application must query the property's version history.
 *@
@(dataNamedGraph: IRI,
  resourceIri: IRI,
  propertyIri: SmartIri,
  currentValueIri: IRI,
  newValueIri: IRI,
  valueTypeIri: SmartIri,
  value: ValueContentV2,
  valueCreator: IRI,
  valuePermissions: String,
  maybeComment: Option[String],
  linkUpdates: Seq[SparqlTemplateLinkUpdate],
  currentTime: Instant,
  requestingUser: IRI)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX knora-base: <http://www.knora.org/ontology/knora-base#>

DELETE {
    GRAPH ?dataNamedGraph {
        @* Detach the current version of the value from the resource. *@
        ?resource ?property ?currentValue .

        @* Delete the resource's last modification date so we can update it. *@
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .

        @* Delete the UUID from the current version of the value, because the new version will store it. *@
        ?currentValue knora-base:valueHasUUID ?currentValueUUID .

        @* Delete the permissions from the current version of the value, because the new version will store them. *@
        ?currentValue knora-base:hasPermissions ?currentValuePermissions .

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Delete direct links for resource references that no longer exist. *@
            @if(linkUpdate.deleteDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* If any LinkValues need to be updated, detach them from the resource. *@
            @if(linkUpdate.linkValueExists) {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .

                @* Delete the UUID from the current version of the link value, because the new version will store it. *@
                ?linkValue@linkValueIndex knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .

                @* Delete the permissions from the current version of the link value, because the new version will store them. *@
                ?linkValue@linkValueIndex knora-base:hasPermissions ?linkValuePermissions@linkValueIndex .
           }
        }
    }
} INSERT {
    GRAPH ?dataNamedGraph {
        @* Construct the new value version. *@
        ?newValue rdf:type <@value.valueType> .
        ?newValue knora-base:isDeleted false  .
        ?newValue knora-base:valueHasString """@value.valueHasString""" .
        ?newValue knora-base:valueHasUUID ?currentValueUUID .
        ?newValue knora-base:attachedToUser <@valueCreator> .
        ?newValue knora-base:hasPermissions "@valuePermissions"^^xsd:string  .
        @* TODO: in case of a file value, order is not given *@
        ?newValue knora-base:valueHasOrder ?order .
        ?newValue knora-base:valueCreationDate "@currentTime"^^xsd:dateTime .
        ?newValue knora-base:previousValue ?currentValue .

        @value match {

            case textValue: TextValueContentV2 => {

                @if(!textValue.valueHasLanguage.isEmpty) {
                    <@newValueIri> knora-base:valueHasLanguage """@textValue.valueHasLanguage.get""" .
                }

                @if(textValue.standoff.nonEmpty) {

                    @* Create a Standoff node for each standoff tag. *@

                    @textValue.mappingIri match {
                        case Some(definedMappingIri) => {
                            <@newValueIri> knora-base:valueHasMapping <@definedMappingIri> .
                        }

                        case None => {}
                    }

                    <@newValueIri> knora-base:valueHasMaxStandoffStartIndex @textValue.computedMaxStandoffStartIndex.get .

                    @for((createStandoff: CreateStandoffTagV2InTriplestore, standoffNodeIndex) <- textValue.prepareForSparqlInsert(newValueIri).zipWithIndex) {

                        <@newValueIri> knora-base:valueHasStandoff <@createStandoff.standoffTagInstanceIri> .

                        <@createStandoff.standoffTagInstanceIri>

                                @*

                                Check for optional standoff properties

                                *@

                                @if(createStandoff.standoffNode.endIndex.isDefined) {
                                    knora-base:standoffTagHasEndIndex @createStandoff.standoffNode.endIndex.get ;
                                }

                                @if(createStandoff.startParentIri.isDefined) {
                                    knora-base:standoffTagHasStartParent <@createStandoff.startParentIri.get> ;
                                }

                                @if(createStandoff.endParentIri.isDefined) {
                                    knora-base:standoffTagHasEndParent <@createStandoff.endParentIri.get> ;
                                }

                                @if(createStandoff.standoffNode.originalXMLID.isDefined) {
                                    knora-base:standoffTagHasOriginalXMLID """@createStandoff.standoffNode.originalXMLID.get""" ;
                                }

                                @*

                                Handle standoff class specific standoff properties

                                *@
                                @for(createProperty <- createStandoff.standoffNode.attributes) {

                                    <@createProperty.standoffPropertyIri> @createProperty.rdfValue ;

                                }

                                knora-base:standoffTagHasStartIndex @createStandoff.standoffNode.startIndex ;
                                knora-base:standoffTagHasUUID "@{UuidUtil.base64Encode(createStandoff.standoffNode.uuid)}" ;
                                knora-base:standoffTagHasStart @createStandoff.standoffNode.startPosition ;
                                knora-base:standoffTagHasEnd @createStandoff.standoffNode.endPosition ;
                                rdf:type <@createStandoff.standoffNode.standoffTagClassIri> .

                    }

                }
            }


            case intValue: IntegerValueContentV2 => {

                <@newValueIri> knora-base:valueHasInteger @intValue.valueHasInteger .

            }

            case decimalValue: DecimalValueContentV2 => {

                <@newValueIri> knora-base:valueHasDecimal "@decimalValue.valueHasDecimal"^^xsd:decimal .

            }

            case booleanValue: BooleanValueContentV2 => {

                <@newValueIri> knora-base:valueHasBoolean @booleanValue.valueHasBoolean .

            }

            case uriValue: UriValueContentV2 => {

                <@newValueIri> knora-base:valueHasUri """@uriValue.valueHasUri"""^^xsd:anyURI .

            }

            case dateValue: DateValueContentV2 => {

                <@newValueIri> knora-base:valueHasStartJDN @dateValue.valueHasStartJDN ;
                                     knora-base:valueHasEndJDN @dateValue.valueHasEndJDN ;
                                     knora-base:valueHasStartPrecision "@dateValue.valueHasStartPrecision" ;
                                     knora-base:valueHasEndPrecision "@dateValue.valueHasEndPrecision" ;
                                     knora-base:valueHasCalendar "@dateValue.valueHasCalendar" .

            }

            case colorValue: ColorValueContentV2 => {

                <@newValueIri> knora-base:valueHasColor """@colorValue.valueHasColor""" .

            }

            case geometryValue: GeomValueContentV2 => {

                <@newValueIri> knora-base:valueHasGeometry """@geometryValue.valueHasGeometry""" .

            }

            case fileValueContentV2: FileValueContentV2 => {
                <@newValueIri> knora-base:internalFilename """@fileValueContentV2.fileValue.internalFilename""" ;
                    knora-base:internalMimeType """@fileValueContentV2.fileValue.internalMimeType""" .

                @fileValueContentV2.fileValue.originalFilename match {
                    case Some(definedOriginalFilename) => {
                        <@newValueIri> knora-base:originalFilename """@definedOriginalFilename""" .
                    }

                    case None => {}
                }

                @fileValueContentV2.fileValue.originalMimeType match {
                    case Some(definedOriginalMimeType) => {
                        <@newValueIri> knora-base:originalMimeType """@definedOriginalMimeType""" .
                    }

                    case None => {}
                }

                @fileValueContentV2.fileValue.copyrightHolder match {
                    case Some(copyrightHolder) => {
                        <@newValueIri> knora-base:hasCopyrightHolder """@copyrightHolder.value""" .
                    }
                    case None => {}
                }

                @fileValueContentV2.fileValue.authorship match {
                    case Some(authors) => {
                        @authors.map { author =>
                            <@newValueIri> knora-base:hasAuthorship """@author.value""" .
                        }
                    }
                    case None => {}
                }

                @fileValueContentV2.fileValue.licenseIri match {
                    case Some(licenseIri) => {
                        <@newValueIri> knora-base:hasLicense <@licenseIri> .
                    }
                    case None => {}
                }

                @fileValueContentV2 match {
                    case stillImageFileValue: StillImageFileValueContentV2 => {
                        <@newValueIri> knora-base:dimX @stillImageFileValue.dimX ;
                            knora-base:dimY @stillImageFileValue.dimY .
                    }

                    case stillImageFileValue: StillImageExternalFileValueContentV2 => {
                        <@newValueIri> knora-base:externalUrl """@stillImageFileValue.externalUrl.value.toString""" .
                    }

                    case documentFileValue: DocumentFileValueContentV2 => {
                        @documentFileValue.dimX match {
                            case Some(definedDimX) => {
                                <@newValueIri> knora-base:dimX @definedDimX .
                            }

                            case None => {}
                        }

                        @documentFileValue.dimY match {
                            case Some(definedDimY) => {
                                <@newValueIri> knora-base:dimY @definedDimY .
                            }

                            case None => {}
                        }

                        @documentFileValue.pageCount match {
                            case Some(definedPageCount) => {
                                <@newValueIri> knora-base:pageCount @definedPageCount .
                            }

                            case None => {}
                        }
                    }

                    case _ => {}
                }
            }

            case listValue: HierarchicalListValueContentV2 => {

                <@newValueIri> knora-base:valueHasListNode <@listValue.valueHasListNode> .

            }

            case intervalValue: IntervalValueContentV2 => {

                <@newValueIri> knora-base:valueHasIntervalStart "@intervalValue.valueHasIntervalStart"^^xsd:decimal ;
                                     knora-base:valueHasIntervalEnd "@intervalValue.valueHasIntervalEnd"^^xsd:decimal .

            }

            case timeValue: TimeValueContentV2 => {

                <@newValueIri> knora-base:valueHasTimeStamp "@timeValue.valueHasTimeStamp"^^xsd:dateTime  .

            }

            case geonameValue: GeonameValueContentV2 => {

                <@newValueIri> knora-base:valueHasGeonameCode """@geonameValue.valueHasGeonameCode""" .

            }

            case other => {
                @{throw SparqlGenerationException(s"Value object $other is not supported in this SPARQL template"); ()}
            }
        }

        @* Insert the value's comment, if given. *@
        @value.comment match {
            case Some(commentStr) => {
                ?newValue knora-base:valueHasComment """@commentStr""" .
            }

            case None => {}
        }

        @* Insert direct links and LinkValues for resource references. *@

        @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
            @* Insert a direct link for the resource reference if necessary. *@
            @if(linkUpdate.insertDirectLink) {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }

            @* Insert a LinkValue for the resource reference. *@
            <@linkUpdate.newLinkValueIri> rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasString "@linkUpdate.linkTargetIri" ;
                knora-base:valueHasRefCount @linkUpdate.newReferenceCount ;
                @if(linkUpdate.newReferenceCount == 0) {
                    knora-base:isDeleted true ;
                    knora-base:deleteDate "@currentTime"^^xsd:dateTime ;
                    knora-base:deletedBy <@requestingUser> ;
                } else {
                    knora-base:isDeleted false ;
                }
                knora-base:valueCreationDate "@currentTime"^^xsd:dateTime .

            <@linkUpdate.newLinkValueIri> knora-base:attachedToUser <@linkUpdate.newLinkValueCreator> ;
                knora-base:hasPermissions "@linkUpdate.newLinkValuePermissions" .

            @*

               If we're inserting a new version of an existing LinkValue, attach it to the previous version,
               and use the previous version's UUID. Otherwise, make a random UUID.

            *@
            @if(linkUpdate.linkValueExists) {
                <@linkUpdate.newLinkValueIri> knora-base:previousValue ?linkValue@linkValueIndex ;
                    knora-base:valueHasUUID ?linkValueUUID@linkValueIndex .
            } else {
                <@linkUpdate.newLinkValueIri> knora-base:valueHasUUID "@{UuidUtil.base64Encode(UUID.randomUUID)}" .
            }

            @* Attach the new LinkValue to its containing resource. *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> <@linkUpdate.newLinkValueIri> .
        }

        @* Attach the value to the resource. *@
        ?resource ?property ?newValue .

        @* Update the resource's last modification date. *@
        ?resource knora-base:lastModificationDate "@currentTime"^^xsd:dateTime .
    }
}

WHERE {
    BIND(IRI("@dataNamedGraph") AS ?dataNamedGraph)
    BIND(IRI("@resourceIri") AS ?resource)
    BIND(IRI("@propertyIri") AS ?property)
    BIND(IRI("@currentValueIri") AS ?currentValue)
    BIND(IRI("@newValueIri") AS ?newValue)
    BIND(IRI("@valueTypeIri") AS ?valueType)

    ?resource ?property ?currentValue .
    ?currentValue rdf:type ?valueType .

    @*

        Consider order if given (not given for file values)

    *@

    OPTIONAL {
        ?currentValue knora-base:valueHasOrder ?order .
    }

    @*

    Do nothing if the resource isn't actually a resource.

    *@

    ?resource rdf:type ?resourceClass .
    ?resourceClass rdfs:subClassOf* knora-base:Resource .

    @* Do nothing if the resource is marked as deleted. *@

    ?resource knora-base:isDeleted false .

    @* Don't add a new version of a deleted value. *@

    ?currentValue knora-base:isDeleted false ;
        knora-base:valueHasUUID ?currentValueUUID ;
        knora-base:hasPermissions ?currentValuePermissions .

    @* If this is a list value, make sure the list node that it points to exists and is a ListNode. *@

    @value match {

        case listValue: HierarchicalListValueContentV2 => {

            <@{listValue.valueHasListNode}> a knora-base:ListNode .

        }

        case _ => {}

    }

    @*

    Check the state of any LinkValues to be updated for resource references.

    *@

    @for((linkUpdate, linkValueIndex) <- linkUpdates.zipWithIndex) {
        @if(linkUpdate.insertDirectLink) {
            @*

            Do nothing if we were asked to insert a direct link to a target that doesn't exist, is marked as deleted,
            isn't a knora-base:Resource, or belongs to the wrong OWL class for the link property.

            *@

            <@linkUpdate.linkTargetIri> rdf:type ?linkTargetClass@linkValueIndex .
            <@linkUpdate.linkTargetIri> knora-base:isDeleted false .

            ?linkTargetClass@linkValueIndex rdfs:subClassOf* knora-base:Resource .
            <@linkUpdate.linkPropertyIri> knora-base:objectClassConstraint ?expectedTargetClass@linkValueIndex .
            ?linkTargetClass@linkValueIndex rdfs:subClassOf* ?expectedTargetClass@linkValueIndex .
        }

        @if(linkUpdate.directLinkExists) {
            @* Make sure the relevant direct link exists between the two resources. *@
            ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
        } else {
            @* Make sure there no such direct link. *@
            MINUS {
                ?resource <@linkUpdate.linkPropertyIri> <@linkUpdate.linkTargetIri> .
            }
        }

        @if(linkUpdate.linkValueExists) {
            @*

            Make sure a knora-base:LinkValue exists, describing the relevant direct link
            between the source and target resources, and has the correct reference count.

            *@
            ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
            ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                rdf:subject ?resource ;
                rdf:predicate <@linkUpdate.linkPropertyIri> ;
                rdf:object <@linkUpdate.linkTargetIri> ;
                knora-base:valueHasRefCount @linkUpdate.currentReferenceCount ;
                knora-base:isDeleted false ;
                knora-base:valueHasUUID ?linkValueUUID@linkValueIndex ;
                knora-base:hasPermissions ?linkValuePermissions@linkValueIndex .
        } else {
            @* Make sure there is no such knora-base:LinkValue. *@
            MINUS {
                ?resource <@{linkUpdate.linkPropertyIri}Value> ?linkValue@linkValueIndex .
                ?linkValue@linkValueIndex rdf:type knora-base:LinkValue ;
                    rdf:subject ?resource ;
                    rdf:predicate <@linkUpdate.linkPropertyIri> ;
                    rdf:object <@linkUpdate.linkTargetIri> ;
                    knora-base:isDeleted false .
            }
        }
    }

    @* Get the resource's last modification date, if it has one, so we can update it. *@

    OPTIONAL {
        ?resource knora-base:lastModificationDate ?resourceLastModificationDate .
    }
}
